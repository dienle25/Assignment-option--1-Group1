# ui.py

# Import c√°c module c·∫ßn thi·∫øt
import services
from models import User
from file_handler import load_data, save_data, USERS_FILE
from services import create_event, update_event, view_all_events
# --- Nh√≥m h√†m x·ª≠ l√Ω giao di·ªán ---

def handle_create_event():
    """X·ª≠ l√Ω lu·ªìng t·∫°o s·ª± ki·ªán m·ªõi."""
    print("\n--- T·∫°o s·ª± ki·ªán m·ªõi ---")
    name = input("Nh·∫≠p t√™n s·ª± ki·ªán: ")
    date = input("Nh·∫≠p ng√†y t·ªï ch·ª©c (NƒÇM-TH√ÅNG-NG√ÄY): ")

    try:
        capacity = int(input("Nh·∫≠p s·ª©c ch·ª©a t·ªëi ƒëa: "))
        if capacity <= 0:
            print("‚ö†Ô∏è S·ª©c ch·ª©a ph·∫£i l·ªõn h∆°n 0.")
            return
    except ValueError:
        print(" S·ª©c ch·ª©a ph·∫£i l√† s·ªë nguy√™n.")
        return
    use_custom_id = input("B·∫°n c√≥ mu·ªën t·ª± nh·∫≠p ID s·ª± ki·ªán? (y/n): ").strip().lower()
    if use_custom_id == 'y':
        event_id = input("Nh·∫≠p ID s·ª± ki·ªán (ph·∫£i l√† duy nh·∫•t): ").strip()
    else:
        event_id = None

    new_event = create_event(name, date, capacity, event_id)
    print(f"üéâ S·ª± ki·ªán '{new_event.name}' ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
    print(f"üìÖ Ng√†y: {new_event.date}")
    print(f"üÜî ID: {new_event.event_id}")
    print(f"üë• S·ª©c ch·ª©a: {new_event.capacity}")

def handle_search_event():
    """(UI/UX - TV6) X·ª≠ l√Ω lu·ªìng t√¨m ki·∫øm s·ª± ki·ªán theo ID."""
    print("\n--- T√¨m ki·∫øm s·ª± ki·ªán theo ID ---")
    event_id = input("Nh·∫≠p ID s·ª± ki·ªán c·∫ßn t√¨m: ")
    for event in view_all_events():
        if event.event_id == event_id:
            print(f"ID: {event.event_id}, T√™n: {event.name}, Ng√†y: {event.date}, S·ª©c ch·ª©a: {event.capacity}, Ng∆∞·ªùi tham d·ª±: {', '.join(event.attendees)}")
            return
    print("Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán v·ªõi ID n√†y.")

def handle_update_event():
    print("\n--- C·∫≠p nh·∫≠t s·ª± ki·ªán ---")
    event_id = input("Nh·∫≠p ID s·ª± ki·ªán c·∫ßn c·∫≠p nh·∫≠t: ") 
    new_name = input("Nh·∫≠p t√™n m·ªõi (ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng thay ƒë·ªïi): ")
    new_date = input("Nh·∫≠p ng√†y m·ªõi (NƒÇM-TH√ÅNG-NG√ÄY, ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng thay ƒë·ªïi): ")

    new_data = {}
    if new_name.strip() != "":
        new_data["name"] = new_name
    if new_date.strip() != "":
        new_data["date"] = new_date
    try:
        new_capacity = input("Nh·∫≠p s·ª©c ch·ª©a m·ªõi (ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng thay ƒë·ªïi): ")
        if new_capacity.strip() != "":
            new_capacity = int(new_capacity)
            if new_capacity <= 0:
                print("‚ö†Ô∏è S·ª©c ch·ª©a ph·∫£i l·ªõn h∆°n 0.")
                return
            new_data["capacity"] = new_capacity
    except ValueError:
        print("‚ö†Ô∏è S·ª©c ch·ª©a ph·∫£i l√† s·ªë nguy√™n.")
        return

    if not new_data:
        print("‚ö†Ô∏è B·∫°n ch∆∞a nh·∫≠p g√¨ ƒë·ªÉ c·∫≠p nh·∫≠t.")
        return

    if update_event(event_id, new_data):
        print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·ª± ki·ªán.")
    else:
        print("‚ùå Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán ƒë·ªÉ c·∫≠p nh·∫≠t.")

def handle_view_all_events():
    events = services.view_all_events()
    if not events:
        print("Hi·ªán t·∫°i kh√¥ng c√≥ s·ª± ki·ªán n√†o.")
        return
    for event in events:
        print(f"ID: {event.event_id}, T√™n: {event.name}, Ng√†y: {event.date}, S·ª©c ch·ª©a: {event.capacity}, Ng∆∞·ªùi tham d·ª±: {', '.join(event.attendees)}")


def handle_delete_event():
    print("\n--- X√≥a s·ª± ki·ªán ---")
    event_id = input("Nh·∫≠p ID s·ª± ki·ªán c·∫ßn x√≥a: ")
    confirm = input("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·ª± ki·ªán n√†y kh√¥ng? (y/n): ")
    if confirm.lower() == 'y':
        services.delete_event(event_id)
        print("‚úÖ ƒê√£ x√≥a s·ª± ki·ªán.")
    else:
        print("‚ùå H·ªßy b·ªè x√≥a s·ª± ki·ªán.")

# --- C√°c h√†m menu ch√≠nh ---

def show_admin_menu(current_user):
    """(UI/UX - TV5) Hi·ªÉn th·ªã v√† ƒëi·ªÅu h∆∞·ªõng menu cho Admin."""
    while True:
        print(f"\n--- Menu Admin (ƒêƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n: {current_user.username}) ---")
        print("1. T·∫°o s·ª± ki·ªán m·ªõi")
        print("2. Xem t·∫•t c·∫£ s·ª± ki·ªán")
        print("3. C·∫≠p nh·∫≠t s·ª± ki·ªán")
        print("4. X√≥a s·ª± ki·ªán")
        print("5. T√¨m s·ª± ki·ªán theo ID")
        print("0. ƒêƒÉng xu·∫•t")

        choice = input("Vui l√≤ng nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: ")

        if choice == '1':
            handle_create_event()
        elif choice == '2':
            handle_view_all_events()
        elif choice == '3':
            handle_update_event()
        elif choice == '4':
            handle_delete_event()
        elif choice == '5':
            handle_search_event()
        elif choice == '0':
            print("ƒêang ƒëƒÉng xu·∫•t...")
            break
        else:
            print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª≠ l·∫°i.")


# ... C√°c h√†m show_student_menu, show_organizer_menu ...
def show_organizer_menu(current_user):
    """(UI/UX - TV6) Hi·ªÉn th·ªã menu cho Event Organizer."""
    while True:
        print("\n===== EVENT ORGANIZER MENU =====")
        print("1. Xem danh s√°ch ng∆∞·ªùi tham d·ª± cho s·ª± ki·ªán")
        print("2. T·∫°o s·ª± ki·ªán m·ªõi")
        print("3. ƒêƒÉng xu·∫•t")
        choice = input("Ch·ªçn m·ªôt t√πy ch·ªçn: ")

        if choice == '1':
            handle_view_attendees_for_organizer(current_user)
        elif choice == '2':
            handle_create_event(current_user)  # ƒê√£ c√≥ s·∫µn trong project
        elif choice == '3':
            print("ƒêƒÉng xu·∫•t...\n")
            break
        else:
            print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")

# --- H√†m ch·∫°y ch√≠nh c·ªßa ch∆∞∆°ng tr√¨nh ---

def main():
    """H√†m ch√≠nh ƒë·ªÉ ƒëi·ªÅu khi·ªÉn to√†n b·ªô lu·ªìng c·ªßa ·ª©ng d·ª•ng."""
    current_user = None
    
    # T·∫°o s·∫µn t√†i kho·∫£n admin n·∫øu ch∆∞a c√≥
    users = load_data(USERS_FILE)
    if not any(user['username'] == 'admin' for user in users):
        save_data(USERS_FILE, [{"username": "admin", "password": "123", "role": "Admin"}])

    while True:
        if not current_user:
            print("\n--- H·ªÜ TH·ªêNG QU·∫¢N L√ù S·ª∞ KI·ªÜN ---")
            print("1. ƒêƒÉng nh·∫≠p")
            print("2. ƒêƒÉng k√Ω")
            print("0. Tho√°t ch∆∞∆°ng tr√¨nh")
            
            choice = input("Vui l√≤ng nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: ")
            
            if choice == '1':
                username = input("T√™n ƒëƒÉng nh·∫≠p: ")
                password = input("M·∫≠t kh·∫©u: ")
                current_user = services.login(username, password)
                if not current_user:
                    print("T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.")
            
            elif choice == '2':
                print('----- ƒêƒÉng k√≠ t√†i kho·∫£n m·ªõi -----')
                username = input('T√™n ƒëƒÉng nh·∫≠p: ')
                password = input('M·∫≠t kh·∫©u: ')
                role = input('Nh·∫≠p vai tr√≤ (Admin / Organizer /  Student): ')
                if services.register(username, password, role):
                    print('T·∫°o t√†i kho·∫£n th√†nh c√¥ng!')
                else:
                    print('T·∫°o t√†i kho·∫£n th·∫•t b·∫°i. Ki·ªÉm tra l·∫°i th√¥ng tin.')

            elif choice == '0':
                print("C·∫£m ∆°n ƒë√£ s·ª≠ d·ª•ng ch∆∞∆°ng tr√¨nh!")
                break
        
        else:
            if current_user.role == 'admin':
                show_admin_menu(current_user)
            elif current_user.role == 'organizer':
                show_organizer_menu(current_user)  # Ch·ª©c nƒÉng d√†nh cho Organizer
            elif current_user.role == 'student':
                show_student_menu(current_user)  # Ch·ª©c nƒÉng d√†nh cho Student
            else:
                print("Vai tr√≤ kh√¥ng h·ª£p l·ªá, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.")
            current_user = None