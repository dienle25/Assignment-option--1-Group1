# ui.py

# Import c√°c module c·∫ßn thi·∫øt
import services
from models import User
from file_handler import load_data, save_data, USERS_FILE
from services import create_event, update_event, view_all_events, search_events, register_for_event, view_registered_events, calculate_total_attendees,find_events_by_attendance,export_to_csv, get_events_by_organizer
# --- Nh√≥m h√†m x·ª≠ l√Ω giao di·ªán ---

from datetime import datetime

def handle_create_event(current_user):
    """X·ª≠ l√Ω lu·ªìng t·∫°o s·ª± ki·ªán m·ªõi, c√≥ ghi nh·∫≠n ng∆∞·ªùi t·∫°o."""
    print("\n--- T·∫°o s·ª± ki·ªán m·ªõi ---")
    name = input("Nh·∫≠p t√™n s·ª± ki·ªán: ")

    # ‚úÖ Ki·ªÉm tra ƒë·ªãnh d·∫°ng ng√†y
    while True:
        date = input("Nh·∫≠p ng√†y t·ªï ch·ª©c (NƒÇM-TH√ÅNG-NG√ÄY): ").strip()
        try:
            datetime.strptime(date, "%Y-%m-%d")
            break
        except ValueError:
            print("‚ö†Ô∏è Nh·∫≠p kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. Vui l√≤ng nh·∫≠p theo d·∫°ng NƒÇM-TH√ÅNG-NG√ÄY (VD: 2025-07-10).")

    try:
        capacity = int(input("Nh·∫≠p s·ª©c ch·ª©a t·ªëi ƒëa: "))
        if capacity <= 0:
            print("‚ö†Ô∏è S·ª©c ch·ª©a ph·∫£i l·ªõn h∆°n 0.")
            return
    except ValueError:
        print("‚ö†Ô∏è S·ª©c ch·ª©a ph·∫£i l√† s·ªë nguy√™n.")
        return

    while True:
        use_custom_id = input("B·∫°n c√≥ mu·ªën t·ª± nh·∫≠p ID s·ª± ki·ªán? (y/n): ").strip().lower()
        if use_custom_id in ['y', 'n']:
            break
        print("‚ö†Ô∏è Vui l√≤ng ch·ªâ nh·∫≠p 'y' (ƒë·ªìng √Ω) ho·∫∑c 'n' (kh√¥ng).")

    if use_custom_id == 'y':
        event_id = input("Nh·∫≠p ID s·ª± ki·ªán (ph·∫£i l√† duy nh·∫•t): ").strip()
    else:
        event_id = None

    new_event = create_event(name, date, capacity, event_id, created_by=current_user.username)

    organizer_username = ""

    if current_user.role == 'admin' and new_event:
        organizer_username = input("B·∫°n c√≥ mu·ªën g√°n s·ª± ki·ªán n√†y cho organizer n√†o kh√¥ng? (nh·∫≠p username ho·∫∑c Enter ƒë·ªÉ b·ªè qua): ").strip()
    if organizer_username:
        services.assign_event_to_organizer(organizer_username, new_event.event_id)
    if new_event:
        print(f"üéâ S·ª± ki·ªán '{new_event.name}' ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
        print(f"üìÖ Ng√†y: {new_event.date}")
        print(f"üÜî ID: {new_event.event_id}")
        print(f"üë• S·ª©c ch·ª©a: {new_event.capacity}")
        print(f"üë§ T·∫°o b·ªüi: {new_event.created_by}")
        print(f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ S·ªë ng∆∞·ªùi ƒë√£ ƒëƒÉng k√Ω: {len(new_event.attendees)}")
    else:
        print("‚ùå Kh√¥ng th·ªÉ t·∫°o s·ª± ki·ªán. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ƒë√£ nh·∫≠p.")

def handle_search_event():
    """(UI/UX - TV6) X·ª≠ l√Ω lu·ªìng t√¨m ki·∫øm s·ª± ki·ªán theo ID."""
    print("\n--- T√¨m ki·∫øm s·ª± ki·ªán theo ID ---")
    event_id = input("Nh·∫≠p ID s·ª± ki·ªán c·∫ßn t√¨m: ")
    for event in view_all_events():
        if event.event_id == event_id:
            so_nguoi_tham_gia = len(event.attendees) if event.attendees else 0
            print(f"\nüîç Th√¥ng tin s·ª± ki·ªán t√¨m th·∫•y:")
            print(f"ID: {event.event_id}")
            print(f"T√™n: {event.name}")
            print(f"Ng√†y: {event.date}")
            print(f"S·ª©c ch·ª©a: {event.capacity}")
            print(f"S·ªë ng∆∞·ªùi tham gia: {so_nguoi_tham_gia}")
            print(f"T·∫°o b·ªüi: {getattr(event, 'created_by', 'Kh√¥ng r√µ')}")
            print("-" * 40)
            return
    print("‚ùå Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán v·ªõi ID n√†y.")

def print_registered_events(username: str):
    print("\nüìã Danh s√°ch s·ª± ki·ªán b·∫°n ƒë√£ ƒëƒÉng k√Ω:\n")
    events = view_registered_events(username)

    if not events:
        print("‚ùó B·∫°n ch∆∞a ƒëƒÉng k√Ω s·ª± ki·ªán n√†o.")
        return

    print(f"{'ID':<15} {'Ti√™u ƒë·ªÅ':<30} {'Ng√†y':<12} {'S·ª©c ch·ª©a':<10} {'ƒê√£ ƒêK':<6} {'T·∫°o b·ªüi':<10}")
    print("-" * 95)

    for event in events:
        registered = len(event.attendees) if event.attendees else 0
        created_by = getattr(event, 'created_by', 'N/A') or 'N/A'
        print(f"{event.event_id:<15} {event.name:<30} {event.date:<12} {event.capacity:<10} {registered:<6} {created_by:<10}")

def handle_update_event():
    print("\n--- C·∫≠p nh·∫≠t s·ª± ki·ªán ---")
    event_id = input("Nh·∫≠p ID s·ª± ki·ªán c·∫ßn c·∫≠p nh·∫≠t: ") 
    new_name = input("Nh·∫≠p t√™n m·ªõi (ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng thay ƒë·ªïi): ")
    new_date = input("Nh·∫≠p ng√†y m·ªõi (NƒÇM-TH√ÅNG-NG√ÄY, ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng thay ƒë·ªïi): ")

    new_data = {}
    if new_name.strip() != "":
        new_data["name"] = new_name
    if new_date.strip() != "":
        try:
            datetime.strptime(new_date.strip(), "%Y-%m-%d")  # ki·ªÉm tra h·ª£p l·ªá
            new_data["date"] = new_date.strip()
        except ValueError:
            print("‚ö†Ô∏è Ng√†y kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng YYYY-MM-DD.")
            return

    try:
        new_capacity = input("Nh·∫≠p s·ª©c ch·ª©a m·ªõi (ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng thay ƒë·ªïi): ")
        if new_capacity.strip() != "":
            new_capacity = int(new_capacity)
            if new_capacity <= 0:
                print("‚ö†Ô∏è S·ª©c ch·ª©a ph·∫£i l·ªõn h∆°n 0.")
                return
            new_data["capacity"] = new_capacity
    except ValueError:
        print("‚ö†Ô∏è S·ª©c ch·ª©a ph·∫£i l√† s·ªë nguy√™n.")
        return

    # ‚úÖ H·ªèi ph√¢n quy·ªÅn ngay sau ph·∫ßn s·ª©c ch·ª©a
    while True:
        assign_organizer = input("B·∫°n c√≥ mu·ªën g√°n organizer cho s·ª± ki·ªán n√†y? (y/n): ").strip().lower()
        if assign_organizer in ['y', 'n']:
            break
        print("‚ö†Ô∏è Vui l√≤ng ch·ªâ nh·∫≠p 'y' (ƒë·ªìng √Ω) ho·∫∑c 'n' (kh√¥ng).")

    organizer_username = ""
    if assign_organizer == 'y':
        organizer_username = input("Nh·∫≠p username c·ªßa organizer: ").strip()

    # ‚úÖ N·∫øu kh√¥ng c√≥ g√¨ ƒë·ªÉ c·∫≠p nh·∫≠t th√¨ d·ª´ng
    if not new_data and not organizer_username:
        print("‚ö†Ô∏è B·∫°n ch∆∞a nh·∫≠p g√¨ ƒë·ªÉ c·∫≠p nh·∫≠t.")
        return

    # ‚úÖ Ti·∫øn h√†nh c·∫≠p nh·∫≠t s·ª± ki·ªán
    success = update_event(event_id, new_data)
    if success:
        print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin s·ª± ki·ªán.")
        
        if organizer_username:
            assigned = services.assign_event_to_organizer(organizer_username, event_id)
            if assigned:
                print(f"‚úÖ ƒê√£ g√°n s·ª± ki·ªán cho organizer '{organizer_username}'.")
            else:
                print("‚ö†Ô∏è Kh√¥ng th·ªÉ g√°n organizer. Ki·ªÉm tra l·∫°i t√™n ng∆∞·ªùi d√πng v√† vai tr√≤.")
    else:
        print("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i. Ki·ªÉm tra l·∫°i th√¥ng tin s·ª± ki·ªán.")


def handle_view_all_events():
    events = services.view_all_events()
    if not events:
        print("Hi·ªán t·∫°i kh√¥ng c√≥ s·ª± ki·ªán n√†o.")
        return

    print("\nüìã Danh s√°ch t·∫•t c·∫£ s·ª± ki·ªán:\n")
    for event in events:
        so_nguoi_tham_du = len(event.attendees) if event.attendees else 0
        print(f"--- S·ª± ki·ªán {event.event_id} ---")
        print(f"ID: {event.event_id}")
        print(f"T√™n: {event.name}")
        print(f"Ng√†y: {event.date}")
        print(f"S·ª©c ch·ª©a: {event.capacity}")
        print(f"S·ªë ng∆∞·ªùi tham gia: {so_nguoi_tham_du}")
        print(f"ƒê∆∞·ª£c t·∫°o b·ªüi: {getattr(event, 'created_by', 'Kh√¥ng r√µ')}")
        print("-" * 40)


def handle_delete_event(current_user):
    print("\n--- X√≥a s·ª± ki·ªán ---")
    event_id = input("Nh·∫≠p ID s·ª± ki·ªán c·∫ßn x√≥a: ").strip()

    # ‚úÖ Ki·ªÉm tra ch·∫∑t ch·∫Ω y/n
    while True:
        confirm = input("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·ª± ki·ªán n√†y kh√¥ng? (y/n): ").strip().lower()
        if confirm in ['y', 'n']:
            break
        print("‚ö†Ô∏è Vui l√≤ng ch·ªâ nh·∫≠p 'y' (ƒë·ªìng √Ω) ho·∫∑c 'n' (kh√¥ng).")

    if confirm == 'y' or confirm == 'yes':
        success = services.delete_event(event_id, current_user)
        if success:
            print("‚úÖ S·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c x√≥a v√† d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.")
        else:
            print("‚ùå X√≥a s·ª± ki·ªán th·∫•t b·∫°i.")
    else:
        print("‚ùå H·ªßy b·ªè x√≥a s·ª± ki·ªán.")


def handle_view_attendees_for_organizer(current_user):
    users = load_data(USERS_FILE)
    user_data = next((u for u in users if u['username'] == current_user.username), None)

    if not user_data or 'assigned_events' not in user_data:
        print("‚ùó B·∫°n ch∆∞a ƒë∆∞·ª£c g√°n s·ª± ki·ªán n√†o.")
        return

    assigned_ids = user_data['assigned_events']
    all_events = services.view_all_events()
    organizer_events = [event for event in all_events if event.event_id in assigned_ids]

    if not organizer_events:
        print("‚ùó Kh√¥ng c√≥ s·ª± ki·ªán n√†o ƒë∆∞·ª£c g√°n cho b·∫°n.")
        return

    for event in organizer_events:
        print(f"\nüìå S·ª± ki·ªán: {event.name}")
        print(f"üÜî ID: {event.event_id}")
        print(f"üìÖ Ng√†y: {event.date}")
        print(f"üë• S·ª©c ch·ª©a: {event.capacity}")
        print(f"‚úÖ S·ªë ng∆∞·ªùi ƒë√£ tham gia: {len(event.attendees)}")
        print(f"üë§ Ng∆∞·ªùi t·∫°o: {getattr(event, 'created_by', 'Kh√¥ng r√µ')}")
        print(f"üìã Danh s√°ch ng∆∞·ªùi tham d·ª±: {', '.join(event.attendees) if event.attendees else 'Kh√¥ng c√≥'}")
        print("-" * 50)
# --- C√°c h√†m menu ch√≠nh ---



def show_admin_menu(current_user):
    """(UI/UX - TV5) Hi·ªÉn th·ªã v√† ƒëi·ªÅu h∆∞·ªõng menu cho Admin."""
    while True:
        print(f"\n--- Menu Admin (ƒêƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n: {current_user.username}) ---")
        print("1. T·∫°o s·ª± ki·ªán m·ªõi")
        print("2. Xem t·∫•t c·∫£ s·ª± ki·ªán")
        print("3. C·∫≠p nh·∫≠t s·ª± ki·ªán")
        print("4. X√≥a s·ª± ki·ªán")
        print("5. T√¨m s·ª± ki·ªán theo ID")
        print("6. T√≠nh t·ªïng s·ªë ng∆∞·ªùi tham d·ª±")
        print("7. T√¨m s·ª± ki·ªán theo s·ªë l∆∞·ª£ng ng∆∞·ªùi tham d·ª±")
        print("8. Xu·∫•t danh s√°ch s·ª± ki·ªán ra file CSV")
        print("0. ƒêƒÉng xu·∫•t")

        choice = input("Vui l√≤ng nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: ")

        if choice == '1':
            handle_create_event(current_user)
        elif choice == '2':
            handle_view_all_events()
        elif choice == '3':
            handle_update_event()
        elif choice == '4':
            handle_delete_event(current_user)
        elif choice == '5':
            handle_search_event()
        elif choice == '6':
            total = calculate_total_attendees()
            print(f"üìä T·ªïng s·ªë l∆∞·ª£t ƒëƒÉng k√Ω tr√™n t·∫•t c·∫£ c√°c s·ª± ki·ªán: {total}")
        elif choice == '7':
            result = find_events_by_attendance()
            highest = result['highest']
            lowest = result['lowest']

            if highest and lowest:
                print(f"üìà S·ª± ki·ªán c√≥ nhi·ªÅu ng∆∞·ªùi nh·∫•t: {highest['name']} ({highest['count']} ng∆∞·ªùi)")
                print(f"üìâ S·ª± ki·ªán c√≥ √≠t ng∆∞·ªùi nh·∫•t: {lowest['name']} ({lowest['count']} ng∆∞·ªùi)")
            else:
                print("‚ùó Kh√¥ng c√≥ d·ªØ li·ªáu s·ª± ki·ªán.")
        elif choice == '8':
            export_to_csv()
        elif choice == '0':
            print("ƒêang ƒëƒÉng xu·∫•t...")
            break
        else:
            print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª≠ l·∫°i.")


# ... C√°c h√†m show_student_menu, show_organizer_menu ...
def show_organizer_menu(current_user):
    """(UI/UX - TV6) Hi·ªÉn th·ªã menu cho Event Organizer."""
    while True:
        print("\n===== EVENT ORGANIZER MENU =====")
        print("1. Xem danh s√°ch ng∆∞·ªùi tham d·ª± cho s·ª± ki·ªán")
        print("2. ƒêƒÉng xu·∫•t")
        choice = input("Ch·ªçn m·ªôt t√πy ch·ªçn: ")

        if choice == '1':
            handle_view_attendees_for_organizer(current_user)
        
        elif choice == '2':
            print("ƒêƒÉng xu·∫•t...\n")
            break
        else:
            print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")

def show_student_menu(current_user):
    while True:
        print(f"\nüéì MENU H·ªåC SINH (Xin ch√†o, {current_user.username})")
        print("1.  T√¨m ki·∫øm s·ª± ki·ªán")
        print("2.  ƒêƒÉng k√Ω tham gia s·ª± ki·ªán")
        print("3.  Xem c√°c s·ª± ki·ªán ƒë√£ ƒëƒÉng k√Ω")
        print("0.  ƒêƒÉng xu·∫•t")

        choice = input("Ch·ªçn ch·ª©c nƒÉng (0-3): ")

        if choice == "1":
            keyword = input("Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm: ")
            events = search_events(keyword)
            if events:
                print("\nüìã K·∫øt qu·∫£ t√¨m ki·∫øm:")
                print(f"{'ID':<15} {'Ti√™u ƒë·ªÅ':<30} {'Ng√†y':<12} {'S·ª©c ch·ª©a':<10} {'ƒê√£ ƒêK':<6} {'T·∫°o b·ªüi':<10}")
                print("-" * 95)
                for event in events:
                    registered = len(event.attendees) if event.attendees else 0
                    created_by = getattr(event, 'created_by', 'N/A') or 'N/A'
                    print(f"{event.event_id:<15} {event.name:<30} {event.date:<12} {event.capacity:<10} {registered:<6} {created_by:<10}")
            else:
                print("‚ùå Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán n√†o ph√π h·ª£p v·ªõi t·ª´ kh√≥a.")
        elif choice == "2":
            event_id = input("Nh·∫≠p m√£ s·ª± ki·ªán mu·ªën ƒëƒÉng k√Ω: ")
            success, status = register_for_event(current_user.username, event_id)

            if success and status == "success":
                print("‚úÖ B·∫°n ƒë√£ ƒëƒÉng k√Ω th√†nh c√¥ng s·ª± ki·ªán!")
            elif status == "duplicated":
                print("‚ö†Ô∏è B·∫°n ƒë√£ ƒëƒÉng k√Ω s·ª± ki·ªán n√†y r·ªìi.")
            elif status == "full":
                print("‚ùå S·ª± ki·ªán ƒë√£ ƒë·∫ßy. Kh√¥ng th·ªÉ ƒëƒÉng k√Ω th√™m.")
            elif status == "not_found":
                print("‚ùå Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán v·ªõi ID b·∫°n ƒë√£ nh·∫≠p.")
            else:
                print("‚ùå Vui l√≤ng th·ª≠ l·∫°i.")
        elif choice == "3":
            print_registered_events(current_user.username)
        elif choice == "0":
            print("ƒêƒÉng xu·∫•t kh·ªèi t√†i kho·∫£n h·ªçc sinh.")
            break
        else:
            print("Vui l√≤ng ch·ªçn ƒë√∫ng ch·ª©c nƒÉng.")

# --- H√†m ch·∫°y ch√≠nh c·ªßa ch∆∞∆°ng tr√¨nh ---

def main():
    """H√†m ch√≠nh ƒë·ªÉ ƒëi·ªÅu khi·ªÉn to√†n b·ªô lu·ªìng c·ªßa ·ª©ng d·ª•ng."""
    current_user = None
    
    # T·∫°o s·∫µn t√†i kho·∫£n admin n·∫øu ch∆∞a c√≥
    users = load_data(USERS_FILE)
    if not any(user['username'] == 'admin' for user in users):
        save_data(USERS_FILE, [{"username": "admin", "password": "123", "role": "Admin"}])

    while True:
        if not current_user:
            print("\n--- H·ªÜ TH·ªêNG QU·∫¢N L√ù S·ª∞ KI·ªÜN ---")
            print("1. ƒêƒÉng nh·∫≠p")
            print("2. ƒêƒÉng k√Ω")
            print("0. Tho√°t ch∆∞∆°ng tr√¨nh")
            
            choice = input("Vui l√≤ng nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: ")
            
            if choice == '1':
                username = input("T√™n ƒëƒÉng nh·∫≠p: ")
                password = input("M·∫≠t kh·∫©u: ")
                current_user = services.login(username, password)
                if not current_user:
                    print("T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.")
            
            elif choice == '2':
                print('----- ƒêƒÉng k√≠ t√†i kho·∫£n m·ªõi -----')
                username = input('T√™n ƒëƒÉng nh·∫≠p: ')
                password = input('M·∫≠t kh·∫©u: ')
                role = input('Nh·∫≠p vai tr√≤ (Admin / Organizer /  Student): ')
                if services.register(username, password, role):
                    print('T·∫°o t√†i kho·∫£n th√†nh c√¥ng!')
                else:
                    print('T·∫°o t√†i kho·∫£n th·∫•t b·∫°i. Ki·ªÉm tra l·∫°i th√¥ng tin.')

            elif choice == '0':
                print("C·∫£m ∆°n ƒë√£ s·ª≠ d·ª•ng ch∆∞∆°ng tr√¨nh!")
                break
        
        else:
            if current_user.role == 'admin':
                show_admin_menu(current_user)
            elif current_user.role == 'organizer':
                show_organizer_menu(current_user)  # Ch·ª©c nƒÉng d√†nh cho Organizer
            elif current_user.role == 'student':
                show_student_menu(current_user)  # Ch·ª©c nƒÉng d√†nh cho Student
            else:
                print("Vai tr√≤ kh√¥ng h·ª£p l·ªá, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.")
            current_user = None